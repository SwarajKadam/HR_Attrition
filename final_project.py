# -*- coding: utf-8 -*-
"""Final_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BZfJo77hWNq5Mxdc7gB_auWxCvgwA935

Name: Swaraj Kadam
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import sklearn
from sklearn.model_selection import train_test_split

df = pd.read_csv("HR_Employee_Attrition-1.csv")

df.head()

df.shape

df.info()

df.isnull().sum() / df.shape[0] * 100

df.describe()

duplicate = df[df.duplicated()]
duplicate

categorical  =[ var for var in df.columns if df[var].dtype == 'O']
print(categorical)
categorical.__len__()

df[categorical].head()

for var in categorical:
  print(df[var].value_counts())

f, ax = plt.subplots(1, 2, figsize=(20,8))
ax[0] = df['Attrition'].value_counts(). plot.pie(explode=[0,0], autopct = '%1.1f%%', ax=ax[0], shadow=True)
ax[0].set_title('Attrition plot ')

ax[1] = sns.countplot(x='Attrition', data=df, palette='Set1')
ax[1].set_title("Distribution of Attrition")
plt.show()

f, ax = plt.subplots(figsize=(10,8))
ax = sns.countplot(x='Attrition', hue= 'BusinessTravel', data=df, palette='Set1' )
ax.set_title("Frequency Distribution of Attrition")
plt.show()

f, ax = plt.subplots(figsize=(10,8))
ax = sns.countplot(x='Attrition', hue= 'OverTime', data=df, palette='Set1' )
ax.set_title("Frequency Distribution of Attrition")
plt.show()

f, ax = plt.subplots(figsize=(5,4))
ax = sns.countplot(x='Attrition', hue= 'EducationField', data=df, palette='Set1' )
ax.set_title("Frequency Distribution of Attrition")
plt.show()

f, ax = plt.subplots(figsize=(5,4))
ax = sns.countplot(x='Attrition', hue= 'Education', data=df, palette='Set1' )
ax.set_title("Frequency Distribution of Attrition")
plt.show()

f, ax = plt.subplots(figsize=(5,4))
ax = sns.countplot(x='Attrition', hue= 'Department', data=df, palette='Set1' )
ax.set_title("Frequency Distribution of Attrition")
plt.show()

f, ax = plt.subplots(figsize=(5,4))
ax = sns.countplot(x='Attrition', hue= 'JobRole', data=df, palette='Set1' )
ax.set_title("Frequency Distribution of Attrition")
plt.show()

df =df.drop(['EmployeeNumber','EmployeeCount', 'Over18', 'StandardHours'], axis = 1)

df.head()

x = df.drop(['Attrition'], axis=1)
y = df['Attrition']

X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2,random_state=42 )

print(X_train.shape, X_test.shape)

import category_encoders as ce
encoder = ce.OrdinalEncoder(cols = ['BusinessTravel', 'Department', 'EducationField', 'Gender', 'JobRole', 'MaritalStatus', 'OverTime'])
X_train = encoder.fit_transform(X_train)
X_test = encoder.fit_transform(X_test)

print(X_train["EducationField"].nunique())

cols = X_train.columns
from sklearn.preprocessing import RobustScaler
scaler = RobustScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.fit_transform(X_test)
X_train = pd.DataFrame(X_train, columns= [cols])
X_test = pd.DataFrame(X_test, columns=[cols])

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(n_estimators=100, random_state=0)
rfc.fit(X_train, Y_train)
y_pred = rfc.predict(X_test)

from sklearn.metrics import accuracy_score
score = accuracy_score(Y_test, y_pred)
print('randomforest classifier', np.abs(score)*100)

y_pred